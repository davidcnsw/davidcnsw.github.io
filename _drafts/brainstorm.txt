


outline of talk

rest apis really taking off, clear and accurate doc is huge importance.

central question: how do you publish? why is this question different from any other help material? what makes API doc different and unique?


another key question is how you integrate ref docs with user guide docs

preliminary notes: focusing on publishing mostly, not intro to apis. also focusing mostly on rest apis.

survey the landscape, note the variety
api doc has specific structure, common sections across all rest api doc. if you have a lot of endpoints, you will prob. want to create templates that get autopopulated. explain how you did that at Badgeville.

here are those common sections
platform api doc has other structure
some other common features: auth keys, hello world, status/error codes
you can use any tool to write to that structure. there are a lot of tool options out there. here are some option.
there are two components to api doc: user guide and ref doc.
devs may commonly write ref doc, and tech writers create user guide.
this creates rift in doc. but sometimes it's worth it to avoid code drift.
platform api doc has some diffs here b/c it's generated from the code.
some problems with automated outputs -- don't integrate with your user guide.
tech writers accustomed to using Flare, etc., but these don't always accomodate ref docs well
the main challenge where help auth tools fail:
 - when you want to entitle devs to write. markdown
 - when doc is treated like code and travels inside code repo
 - when you have lots of code samples that need syntax highlighting
 - when your docs really need to sell the product. with api doc, this is product so must make it sexy. UX will use their own toolset.

will api doc help sell the product?
- if so, involve UX
- UX will probably do html, css, javascript
- static site generators really helpful in these situations b/c they allow re-use

first question is whether devs will write, contribute. rio macnamara talk.
why it's good for devs to write:
 - code is complex
 - devs writing to devs -- sometimes understand aud better
 - cons: assume too much. not all devs are specialists in the tech they're using. not nearly enough handholding
 - avoid doc drift. if there are checks inside the code requiring doc for each param, that's good. build custom script to pull it into doc.

another factor: what is the dev audience like. online, working at a monitor. want to do quick searches. devs don't like reading a lot of doc. they love code samples. copy and paste and have things just work. this means a few decisions:
 - pdf unnecessary unless you have access issues that make it difficult to get to your docs.
 - need good syntax highlighting
 - know how to do progressive info disclosure

one main problem is that there's so much variety in skill level among the audience. nothing is quite so varied as technical ability. need way to layer infomration for progressive information disclosure.




there are some commercial tools as well like readme.com.

some design patterns: single page docs, tri columns,

a few solutions:

autogen route like swagger.

tooling infrastructure like mulesoft, mashape, etc.

use your existing tools.

static site generators. treat doc as code. easily embed code samples. light infrastructure.


limit to 20 slides

you need some kind of story arc to things
bootstrap and foundation
using jekyll
how to get engineers
how do you know if it's good if the code is too complex for you to understand
how to test what you write
should you use markdown? why does markdown fit a dev doc shop?
can you use a hat like flare?
copy and paste snippets. gists.
how will devs consume it? pull from your UCD presentation.
hello world tutorials.
video
glossary
online vs. pdf
how to know what to assume about your audience's level of knowledge.

how to get engineers to review the content
with static site gens, easy to embed code for demos.

- api endpoint doc has a specific structure to it
- story of your attempt to unite doc generated content into regular doc
- auto-gen solutions will create isolated outputs not tied in with user guide

- but engineers write shitty doc, so why go out of the way to allow them to write?- who is doing the writing? if engineers, look to use source. example = ria macnamara at google
                                                                                  - sometimes the content is really complicated, so it's better for them to write it

- building templates to cycle through standard sections

- some big tools: readme.com, readthedocs.com, mulesoft


- ref docs and user guides not easy to mush together

- generate from source -- pull in real json examples from a test system. this is how we did it at badgeville.

- integrating into source code workflow

- offering try it out within api -- this can be dangerous. plus people learning may not have actual data. kind of a novelty.

- with rest apis, make sure you cover each of the core sections

- there are many different ways to publish docs

- some design patterns: three column, infinite pages, etc.

- some design non-patterns: pdf, dita,

- how do you authenticate your docs to the right users?



Design patterns
trends:

- code syntax highlighting
- custom-branded websites
- easily browsable classes
- hello world tutorials
- one page with infinite scrolling, or separate pages? https://stripe.com/docs/api  https://parse.com/docs/rest/guide#objects
- api console?
- wikis, comments
- search
- toc on the left?
- multiple levels of navigation (not just one level with a sidebar?)
- api explorer. https://dev.twitter.com/rest/tools/console
- versioning


example of the long page, single page docs. https://developer.paypal.com/docs/api/#api-operations

example of the tripane output. https://developer.paypal.com/docs/api/#api-operations

auto-generated. http://www.reddit.com/dev/api

labels for the http method





## The focus here is on publishing

This API course has a specific focus: publishing strategies for API documentation. If you're new to APIs, first see my course <a href="{{ "/restapicourse" | prepend: site.baseurl }}">REST API Course</a>.

## API docs have incredible variety

Nothing has so much variety in tech docs as API documentation. Almost no API doc set is the same. Whereas many tech comm outputs are recognizable to a specific tool, such as a Madcap Flare output, a Framemaker output, or an Author-it output, it's hard to attribute an API doc set to a particular tool.

If dividing API docs into categories, there are probably 3 main categories of publishing:

* Document generators from source code (native library APIs)
* Custom websites
* Spec-driven approaches (RAML, Swagger)
* All-in-one API platforms (Apigee, Mulesoft)

## My approach is to identify key trends and patterns

My approach in this presentation is to identify some key trends and patterns with API documentation publishing. Rather than focusing on specific tools, I want to look at common themes or techniques in outputs. You can do similar things with a lot of different tools.

## 50 APIs

put this into a design patterns section: https://www.reddit.com/dev/api






